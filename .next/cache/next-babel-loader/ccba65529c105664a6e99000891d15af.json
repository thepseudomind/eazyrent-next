{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { PAGEROUTE, ADDTOBANK, CHANGEFORM, RESETALERTBOX, RETRIEVESTATE, EDITBANK, OVERWRITEBANK, DELETEBANK } from \"../constants/constants\";\nimport { Bank } from '../types/types';\nconst initialRoute = {\n  route: 'listing'\n};\nexport const routeReducer = (state = initialRoute, action = {}) => {\n  switch (action.type) {\n    case PAGEROUTE:\n      return _objectSpread({}, state, {\n        route: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\nconst initialBanks = {\n  form: '',\n  alert: '',\n  banks: [],\n  // new Bank('Sterling Bank', '2357810094', 'current', '256092341625', 'verified')\n  bankToEdit: ''\n};\nexport const bankReducers = (state = initialBanks, action = {}) => {\n  switch (action.type) {\n    case RETRIEVESTATE:\n      return _objectSpread({}, state, {}, action.payload);\n\n    case ADDTOBANK:\n      //If bank is already in list\n      for (const bank of state.banks) {\n        if (bank.account === action.payload.account) {\n          console.log('Bank already added');\n          return _objectSpread({}, state, {\n            alert: 'Bank already added'\n          });\n        }\n      } //Only allow 3 banks to be added at a given time\n\n\n      if (state.banks.length >= 3) {\n        console.log('You cannot add any more banks');\n        return _objectSpread({}, state, {\n          alert: 'Maximum of 3 banks allowed'\n        });\n      } else {\n        localStorage.setItem('bank', _JSON$stringify(_objectSpread({}, state, {\n          form: '',\n          banks: [...state.banks, action.payload]\n        }))); //Persisting bank changes in localstorage\n\n        return _objectSpread({}, state, {\n          banks: [...state.banks, action.payload]\n        });\n      }\n\n    case EDITBANK:\n      for (const bank of state.banks) {\n        if (bank.id === _parseInt(action.payload)) {\n          return _objectSpread({}, state, {\n            bankToEdit: bank\n          });\n        }\n      }\n\n      return state;\n\n    case OVERWRITEBANK:\n      let newBanks;\n\n      for (const bank of state.banks) {\n        if (bank.id === _parseInt(action.payload.id)) {\n          const indexToChange = state.banks.indexOf(bank);\n          state.banks.splice(indexToChange, 1, action.payload);\n          newBanks = state.banks;\n        }\n      }\n\n      localStorage.setItem('bank', _JSON$stringify(_objectSpread({}, state, {\n        form: '',\n        banks: newBanks\n      }))); //Persisting bank changes in localstorage\n\n      return _objectSpread({}, state, {\n        alert: 'Bank details changed',\n        banks: newBanks\n      });\n\n    case DELETEBANK:\n      let remainingBanks;\n\n      for (const bank of state.banks) {\n        if (bank.id === _parseInt(action.payload)) {\n          const indexToDelete = state.banks.indexOf(bank);\n          state.banks.splice(indexToDelete, 1);\n          remainingBanks = state.banks;\n        }\n      }\n\n      localStorage.setItem('bank', _JSON$stringify(_objectSpread({}, state, {\n        form: '',\n        banks: remainingBanks\n      }))); //Persisting bank changes in localstorage\n\n      return _objectSpread({}, state, {\n        alert: 'Bank deleted',\n        banks: remainingBanks\n      });\n\n    case RESETALERTBOX:\n      return _objectSpread({}, state, {\n        alert: action.payload\n      });\n\n    case CHANGEFORM:\n      return _objectSpread({}, state, {\n        form: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/kenny/eazyrent/reducers/reducers.js"],"names":["PAGEROUTE","ADDTOBANK","CHANGEFORM","RESETALERTBOX","RETRIEVESTATE","EDITBANK","OVERWRITEBANK","DELETEBANK","Bank","initialRoute","route","routeReducer","state","action","type","payload","initialBanks","form","alert","banks","bankToEdit","bankReducers","bank","account","console","log","length","localStorage","setItem","id","newBanks","indexToChange","indexOf","splice","remainingBanks","indexToDelete"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,aAA3C,EAA0DC,aAA1D,EAAyEC,QAAzE,EAAmFC,aAAnF,EAAkGC,UAAlG,QAAoH,wBAApH;AACA,SAASC,IAAT,QAAqB,gBAArB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAM,GAAG,EAAhC,KAAsC;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,SAAL;AACI,+BAAWY,KAAX;AAAkBF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAAhC;;AAEJ;AACI,aAAOH,KAAP;AALR;AAOH,CARM;AAWP,MAAMI,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAG,EADU;AAEjBC,EAAAA,KAAK,EAAG,EAFS;AAGjBC,EAAAA,KAAK,EAAE,EAHU;AAGN;AACXC,EAAAA,UAAU,EAAE;AAJK,CAArB;AAOA,OAAO,MAAMC,YAAY,GAAG,CAACT,KAAK,GAAGI,YAAT,EAAuBH,MAAM,GAAC,EAA9B,KAAoC;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,aAAL;AACI,+BAAWQ,KAAX,MAAqBC,MAAM,CAACE,OAA5B;;AAEJ,SAAKd,SAAL;AACI;AACA,WAAK,MAAMqB,IAAX,IAAmBV,KAAK,CAACO,KAAzB,EAAgC;AAC5B,YAAGG,IAAI,CAACC,OAAL,KAAiBV,MAAM,CAACE,OAAP,CAAeQ,OAAnC,EAA2C;AACvCC,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,mCAAWb,KAAX;AAAkBM,YAAAA,KAAK,EAAE;AAAzB;AACH;AACJ,OAPL,CASI;;;AACA,UAAGN,KAAK,CAACO,KAAN,CAAYO,MAAZ,IAAsB,CAAzB,EAA2B;AACvBF,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACA,iCAAWb,KAAX;AAAkBM,UAAAA,KAAK,EAAE;AAAzB;AACH,OAHD,MAGK;AACDS,QAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6B,kCAAmBhB,KAAnB;AAA0BK,UAAAA,IAAI,EAAE,EAAhC;AAAoCE,UAAAA,KAAK,EAAE,CAAC,GAAGP,KAAK,CAACO,KAAV,EAAiBN,MAAM,CAACE,OAAxB;AAA3C,WAA7B,EADC,CAC4G;;AAC7G,iCAAWH,KAAX;AAAkBO,UAAAA,KAAK,EAAE,CAAC,GAAGP,KAAK,CAACO,KAAV,EAAiBN,MAAM,CAACE,OAAxB;AAAzB;AACH;;AAEL,SAAKV,QAAL;AACI,WAAK,MAAMiB,IAAX,IAAmBV,KAAK,CAACO,KAAzB,EAAgC;AAC5B,YAAGG,IAAI,CAACO,EAAL,KAAY,UAAShB,MAAM,CAACE,OAAhB,CAAf,EAAwC;AACpC,mCAAWH,KAAX;AAAkBQ,YAAAA,UAAU,EAAEE;AAA9B;AACH;AACJ;;AACD,aAAOV,KAAP;;AAEJ,SAAKN,aAAL;AACI,UAAIwB,QAAJ;;AACA,WAAK,MAAMR,IAAX,IAAmBV,KAAK,CAACO,KAAzB,EAAgC;AAC5B,YAAGG,IAAI,CAACO,EAAL,KAAY,UAAShB,MAAM,CAACE,OAAP,CAAec,EAAxB,CAAf,EAA2C;AACvC,gBAAME,aAAa,GAAGnB,KAAK,CAACO,KAAN,CAAYa,OAAZ,CAAoBV,IAApB,CAAtB;AACAV,UAAAA,KAAK,CAACO,KAAN,CAAYc,MAAZ,CAAmBF,aAAnB,EAAkC,CAAlC,EAAqClB,MAAM,CAACE,OAA5C;AACAe,UAAAA,QAAQ,GAAGlB,KAAK,CAACO,KAAjB;AACH;AACJ;;AACDQ,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6B,kCAAmBhB,KAAnB;AAA0BK,QAAAA,IAAI,EAAE,EAAhC;AAAoCE,QAAAA,KAAK,EAAEW;AAA3C,SAA7B,EATJ,CASyF;;AACrF,+BAAWlB,KAAX;AAAkBM,QAAAA,KAAK,EAAE,sBAAzB;AAAiDC,QAAAA,KAAK,EAAEW;AAAxD;;AAEJ,SAAKvB,UAAL;AACQ,UAAI2B,cAAJ;;AACA,WAAK,MAAMZ,IAAX,IAAmBV,KAAK,CAACO,KAAzB,EAAgC;AAC5B,YAAGG,IAAI,CAACO,EAAL,KAAY,UAAShB,MAAM,CAACE,OAAhB,CAAf,EAAwC;AACpC,gBAAMoB,aAAa,GAAGvB,KAAK,CAACO,KAAN,CAAYa,OAAZ,CAAoBV,IAApB,CAAtB;AACAV,UAAAA,KAAK,CAACO,KAAN,CAAYc,MAAZ,CAAmBE,aAAnB,EAAkC,CAAlC;AACAD,UAAAA,cAAc,GAAGtB,KAAK,CAACO,KAAvB;AACH;AACJ;;AACDQ,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6B,kCAAmBhB,KAAnB;AAA0BK,QAAAA,IAAI,EAAE,EAAhC;AAAoCE,QAAAA,KAAK,EAAEe;AAA3C,SAA7B,EATR,CASmG;;AAC3F,+BAAWtB,KAAX;AAAkBM,QAAAA,KAAK,EAAE,cAAzB;AAAyCC,QAAAA,KAAK,EAAEe;AAAhD;;AAER,SAAK/B,aAAL;AACQ,+BAAWS,KAAX;AAAkBM,QAAAA,KAAK,EAAEL,MAAM,CAACE;AAAhC;;AAER,SAAKb,UAAL;AACI,+BAAWU,KAAX;AAAkBK,QAAAA,IAAI,EAAEJ,MAAM,CAACE;AAA/B;;AAEJ;AACI,aAAOH,KAAP;AA7DR;AA+DH,CAhEM","sourcesContent":["import { PAGEROUTE, ADDTOBANK, CHANGEFORM, RESETALERTBOX, RETRIEVESTATE, EDITBANK, OVERWRITEBANK, DELETEBANK } from \"../constants/constants\";\nimport { Bank } from '../types/types';\n\nconst initialRoute = {\n    route: 'listing'\n}\n\nexport const routeReducer = (state = initialRoute, action = {}) =>{\n    switch (action.type) {\n        case PAGEROUTE:\n            return {...state, route: action.payload}\n    \n        default:\n            return state;\n    }\n}\n\n\nconst initialBanks = {\n    form : '',\n    alert : '',\n    banks: [], // new Bank('Sterling Bank', '2357810094', 'current', '256092341625', 'verified')\n    bankToEdit: ''\n}\n\nexport const bankReducers = (state = initialBanks, action={}) =>{\n    switch (action.type) {\n        case RETRIEVESTATE: \n            return {...state, ...action.payload};\n            \n        case ADDTOBANK:\n            //If bank is already in list\n            for (const bank of state.banks) {\n                if(bank.account === action.payload.account){\n                    console.log('Bank already added');\n                    return {...state, alert: 'Bank already added'};\n                }\n            }\n\n            //Only allow 3 banks to be added at a given time\n            if(state.banks.length >= 3){\n                console.log('You cannot add any more banks');\n                return {...state, alert: 'Maximum of 3 banks allowed'};\n            }else{\n                localStorage.setItem('bank', JSON.stringify({...state, form: '', banks: [...state.banks, action.payload]})); //Persisting bank changes in localstorage\n                return {...state, banks: [...state.banks, action.payload]};\n            }\n\n        case EDITBANK: \n            for (const bank of state.banks) {\n                if(bank.id === parseInt(action.payload)){\n                    return {...state, bankToEdit: bank};\n                }\n            }\n            return state;\n\n        case OVERWRITEBANK:\n            let newBanks;\n            for (const bank of state.banks) {\n                if(bank.id === parseInt(action.payload.id)){\n                    const indexToChange = state.banks.indexOf(bank);\n                    state.banks.splice(indexToChange, 1, action.payload);\n                    newBanks = state.banks;\n                }\n            }\n            localStorage.setItem('bank', JSON.stringify({...state, form: '', banks: newBanks})); //Persisting bank changes in localstorage\n            return {...state, alert: 'Bank details changed', banks: newBanks};\n\n        case DELETEBANK:\n                let remainingBanks;\n                for (const bank of state.banks) {\n                    if(bank.id === parseInt(action.payload)){\n                        const indexToDelete = state.banks.indexOf(bank);\n                        state.banks.splice(indexToDelete, 1);\n                        remainingBanks = state.banks;\n                    }\n                }\n                localStorage.setItem('bank', JSON.stringify({...state, form: '', banks: remainingBanks})); //Persisting bank changes in localstorage\n                return {...state, alert: 'Bank deleted', banks: remainingBanks};\n\n        case RESETALERTBOX:\n                return {...state, alert: action.payload};\n\n        case CHANGEFORM:\n            return {...state, form: action.payload};\n    \n        default:\n            return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}